// Copyright 2023, UChicago Argonne, LLC
// All Rights Reserved
// Software Name: NEML2 -- the New Engineering material Model Library, version 2
// By: Argonne National Laboratory
// OPEN SOURCE LICENSE (MIT)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#include <catch2/catch.hpp>

#include "utils.h"
#include "neml2/tensors/Rot.h"
#include "neml2/tensors/Scalar.h"
#include "neml2/tensors/R3.h"
#include "neml2/tensors/R4.h"
#include "neml2/tensors/SymSymR4.h"
#include "neml2/tensors/RotRot.h"
#include "neml2/tensors/VecRot.h"
#include "neml2/tensors/R2Rot.h"
#include "neml2/tensors/SymR2Rot.h"
#include "neml2/tensors/R4Rot.h"
#include "neml2/tensors/SymSymR4Rot.h"

using namespace neml2;

TEST_CASE("Rot", "[Rot]")
{
  SECTION("inverse rotations are in fact inverses")
  {
    SECTION("identity is zero")
    {
      Rot a = Rot::identity();
      REQUIRE(torch::allclose(a, torch::zeros_like(a)));
    }

    SECTION("unbatched")
    {
      Rot a = Rot::init(1.2, 3.1, -2.1);
      Rot b = a.inverse();

      REQUIRE(torch::allclose(a * b, Rot::identity()));
    }
    SECTION("batched")
    {
      Rot a = Rot::init(Scalar(torch::tensor({{1.2}, {-0.5}}, default_tensor_options)),
                        Scalar(torch::tensor({{3.1}, {-1.6}}, default_tensor_options)),
                        Scalar(torch::tensor({{-2.1}, {0.5}}, default_tensor_options)));
      Rot b = a.inverse();

      REQUIRE(torch::allclose(a * b, Rot::identity()));
    }
  }
  SECTION("test composition of rotations")
  {
    SECTION("unbatched, operator")
    {
      Rot a = Rot::init(1.2496889, 1.62862628, 7.59575411);
      Rot b = Rot::init(-5.68010824, -2.8011194, 15.25705169);
      Rot c = Rot::init(-0.40390244, 0.61401441, -0.27708492);

      REQUIRE(torch::allclose(a * b, c));
    }
    SECTION("batched, operator")
    {
      Rot a =
          Rot::init(Scalar(torch::tensor({{1.2496889}, {-2.74440729}}, default_tensor_options)),
                    Scalar(torch::tensor({{1.62862628}, {-1.10086082}}, default_tensor_options)),
                    Scalar(torch::tensor({{7.59575411}, {-14.83201462}}, default_tensor_options)));
      Rot b =
          Rot::init(Scalar(torch::tensor({{-5.68010824}, {0.97525904}}, default_tensor_options)),
                    Scalar(torch::tensor({{-2.8011194}, {0.05227498}}, default_tensor_options)),
                    Scalar(torch::tensor({{15.25705169}, {-2.83462851}}, default_tensor_options)));
      Rot c =
          Rot::init(Scalar(torch::tensor({{-0.40390244}, {-0.05551478}}, default_tensor_options)),
                    Scalar(torch::tensor({{0.61401441}, {0.60802679}}, default_tensor_options)),
                    Scalar(torch::tensor({{-0.27708492}, {0.43687898}}, default_tensor_options)));

      REQUIRE(torch::allclose(a * b, c));
    }

    SECTION("unbatched, apply")
    {
      Rot a = Rot::init(1.2496889, 1.62862628, 7.59575411);
      Rot b = Rot::init(-5.68010824, -2.8011194, 15.25705169);
      Rot c = Rot::init(-0.40390244, 0.61401441, -0.27708492);

      REQUIRE(torch::allclose(a.apply(b), c));
    }
    SECTION("batched, apply")
    {
      Rot a =
          Rot::init(Scalar(torch::tensor({{1.2496889}, {-2.74440729}}, default_tensor_options)),
                    Scalar(torch::tensor({{1.62862628}, {-1.10086082}}, default_tensor_options)),
                    Scalar(torch::tensor({{7.59575411}, {-14.83201462}}, default_tensor_options)));
      Rot b =
          Rot::init(Scalar(torch::tensor({{-5.68010824}, {0.97525904}}, default_tensor_options)),
                    Scalar(torch::tensor({{-2.8011194}, {0.05227498}}, default_tensor_options)),
                    Scalar(torch::tensor({{15.25705169}, {-2.83462851}}, default_tensor_options)));
      Rot c =
          Rot::init(Scalar(torch::tensor({{-0.40390244}, {-0.05551478}}, default_tensor_options)),
                    Scalar(torch::tensor({{0.61401441}, {0.60802679}}, default_tensor_options)),
                    Scalar(torch::tensor({{-0.27708492}, {0.43687898}}, default_tensor_options)));

      REQUIRE(torch::allclose(a.apply(b), c));
    }
  }

  SECTION("test conversion to matrix")
  {
    SECTION("unbatched")
    {
      Rot a = Rot::init(1.2496889, 1.62862628, 7.59575411);
      auto Ap = R2(torch::tensor({{{-0.91855865, -0.1767767, 0.35355339},
                                   {0.30618622, -0.88388348, 0.35355339},
                                   {0.25, 0.4330127, 0.8660254}}},
                                 default_tensor_options));
      REQUIRE(torch::allclose(a.to_R2(), Ap));
    }
    SECTION("batched")
    {
      Rot a = Rot(
          torch::tensor({{1.2496889, 1.62862628, 7.59575411}, {1.2496889, 1.62862628, 7.59575411}},
                        default_tensor_options));
      auto Ap = R2(torch::tensor({{{-0.91855865, -0.1767767, 0.35355339},
                                   {0.30618622, -0.88388348, 0.35355339},
                                   {0.25, 0.4330127, 0.8660254}},
                                  {{-0.91855865, -0.1767767, 0.35355339},
                                   {0.30618622, -0.88388348, 0.35355339},
                                   {0.25, 0.4330127, 0.8660254}}},
                                 default_tensor_options));
      REQUIRE(torch::allclose(a.to_R2(), Ap));
    }
  }

  SECTION("rotate vectors")
  {
    SECTION("unbatched")
    {
      Rot a = Rot::init(1.2496889, 1.62862628, 7.59575411);
      Vec v = Vec(torch::tensor({{1.0, -2.0, 3.0}}, default_tensor_options));

      Vec vp = Vec(torch::tensor({{0.495655, 3.13461, 1.98205}}, default_tensor_options));

      REQUIRE(torch::allclose(a.apply(v), vp));
    }
    SECTION("batched")
    {
      Rot a = Rot(torch::tensor({{1.2496889, 1.62862628, 7.59575411}, {1.2, -0.2, 0.6}},
                                default_tensor_options));
      Vec v = Vec(torch::tensor({{1.0, -2.0, 3.0}, {0.1, -0.75, 1.0}}, default_tensor_options));

      Vec vp = Vec(torch::tensor({{0.495655, 3.13461, 1.98205}, {0.88169, -0.703521, -0.547887}},
                                 default_tensor_options));

      REQUIRE(torch::allclose(a.apply(v), vp));
    }
  }

  SECTION("rotate R2s")
  {
    SECTION("unbatched")
    {
      Rot a = Rot::init(1.2496889, 1.62862628, 7.59575411);
      R2 T = R2(torch::tensor({{{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}}},
                              default_tensor_options));
      R2 U = R2(torch::tensor({{{-1.02332, -0.0592151, -0.290549},
                                {0.440785, 0.208734, -1.65399},
                                {-5.14556, -2.0769, 15.8146}}},
                              default_tensor_options));
      REQUIRE(torch::allclose(a.apply(T), U));
    }

    SECTION("batched")
    {
      Rot a = Rot(torch::tensor({{1.2496889, 1.62862628, 7.59575411}, {1.2, -0.2, 0.6}},
                                default_tensor_options));
      R2 T = R2(torch::tensor({{{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}},
                               {{0.615498, 0.423851, 0.923136},
                                {0.919749, 0.032701, 0.596574},
                                {0.318928, 0.14111, 0.132195}}},
                              default_tensor_options));
      R2 U = R2(torch::tensor({{{-1.02332, -0.0592151, -0.290549},
                                {0.440785, 0.208734, -1.65399},
                                {-5.14556, -2.0769, 15.8146}},
                               {{-0.0572522, -0.419716, 0.250605},
                                {-0.27622, -0.0442297, -0.27309},
                                {0.988739, -0.776077, 0.881875}}},
                              default_tensor_options));
      REQUIRE(torch::allclose(a.apply(T), U));
    }
  }

  SECTION("rotate SymR2s")
  {
    SECTION("unbatched")
    {
      Rot a = Rot::init(1.2496889, 1.62862628, 7.59575411);
      SymR2 T = SymR2::init(R2(torch::tensor({{{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}}},
                                             default_tensor_options)));
      SymR2 U = SymR2::init(-1.02332, 0.208734, 15.8146, -1.86545, -2.71806, 0.190785);
      REQUIRE(torch::allclose(a.apply(T), U));
    }

    SECTION("batched")
    {
      Rot a = Rot(torch::tensor({{1.2496889, 1.62862628, 7.59575411}, {1.2, -0.2, 0.6}},
                                default_tensor_options));
      SymR2 T = SymR2(
          torch::tensor({{1.0, 5.0, 9.0, 9.89949494, 7.07106781, 4.24264069},
                         {0.75358893, 0.02714332, 0.32255212, 0.0489869, 0.57781672, 1.19529574}},
                        default_tensor_options));
      SymR2 U = SymR2(torch::tensor(
          {{-1.02331668, 0.20873412, 15.81458256, -2.63813972, -3.84391109, 0.26981064},
           {-0.07675771, 0.0390743, 1.14096779, -0.1798746, 0.80097621, -0.67419054}},
          default_tensor_options));
      REQUIRE(torch::allclose(a.apply(T), U));
    }
  }

  SECTION("rotate R4s")
  {
    SECTION("unbatched")
    {
      Rot a = Rot::init(1.2496889, 1.62862628, 7.59575411);
      R4 T = R4(torch::tensor({{{{{0.66112296, 0.67364277, 0.52908828},
                                  {0.56724338, 0.58715151, 0.11093917},
                                  {0.21574421, 0.15568454, 0.81052343}},
                                 {{0.57389508, 0.46795234, 0.62969397},
                                  {0.58735001, 0.96843709, 0.1604007},
                                  {0.88311546, 0.0441955, 0.48777658}},
                                 {{0.99507367, 0.56344149, 0.34286399},
                                  {0.15020997, 0.15300364, 0.84086095},
                                  {0.5106674, 0.45230156, 0.21724192}}},
                                {{{0.54456104, 0.18254561, 0.49353823},
                                  {0.59161612, 0.81852437, 0.46011312},
                                  {0.8643376, 0.71817923, 0.99371746}},
                                 {{0.48442184, 0.62605832, 0.73174494},
                                  {0.90427983, 0.21560154, 0.85167291},
                                  {0.60321318, 0.70176223, 0.72316361}},
                                 {{0.03911803, 0.284356, 0.47101786},
                                  {0.23046833, 0.43203527, 0.80362567},
                                  {0.10884239, 0.26013328, 0.64722489}}},
                                {{{0.97510859, 0.1980099, 0.82347827},
                                  {0.15653814, 0.05652895, 0.58470749},
                                  {0.08975475, 0.5209197, 0.59695489}},
                                 {{0.40475775, 0.58923968, 0.68776156},
                                  {0.84788879, 0.34349879, 0.65479406},
                                  {0.51828743, 0.85120858, 0.887165}},
                                 {{0.63091418, 0.04140195, 0.40599633},
                                  {0.66631594, 0.2543073, 0.63205863},
                                  {0.76469959, 0.27718685, 0.77058401}}}}},
                              default_tensor_options));
      R4 U = R4(torch::tensor({{{{{0.23820857, 0.43305693, -0.20977483},
                                  {0.62563634, 0.54712896, 0.1482663},
                                  {-0.42577276, 0.0763476, 0.77115534}},
                                 {{-0.11860723, 0.05294212, -0.1852346},
                                  {0.1659533, 0.55463045, -0.02926287},
                                  {-0.4664211, 0.20061751, 0.08689772}},
                                 {{-0.57907037, -0.27356366, 0.86360503},
                                  {0.287918, -0.16939878, 0.27825703},
                                  {0.66426806, 0.12291877, -1.10089594}}},
                                {{{-0.05775137, -0.08507278, 0.2028092},
                                  {0.03165453, 0.15485068, -0.11123546},
                                  {-0.72807784, -0.06492156, 0.72400724}},
                                 {{0.22689592, -0.12497932, -0.26253125},
                                  {-0.0691542, -0.56413159, -0.00848574},
                                  {-0.09947468, 0.10061001, 0.12538374}},
                                 {{0.32656294, -0.09888548, 0.087943},
                                  {-0.20833318, 0.06218009, 0.27494329},
                                  {-0.2485973, 0.12094771, -0.62021714}}},
                                {{{-0.61516067, 0.29228151, 0.84331687},
                                  {-0.06538272, -0.08037612, -0.17996251},
                                  {0.41248725, 0.19490796, -1.66034649}},
                                 {{0.07809489, -0.24446264, 0.39108274},
                                  {-0.45171636, 0.27742552, 0.03804866},
                                  {0.50723862, 0.23988241, -0.89988478}},
                                 {{0.69355161, -0.20550391, -1.19532462},
                                  {0.15709077, -0.14514052, -0.46242684},
                                  {-1.20970014, 0.18995295, 3.24473836}}}}},
                              default_tensor_options));

      REQUIRE(torch::allclose(a.apply(T), U));
    }

    SECTION("batched")
    {
      Rot a = Rot(torch::tensor({{1.2496889, 1.62862628, 7.59575411}, {1.2, -0.2, 0.6}},
                                default_tensor_options));
      R4 T = R4(torch::tensor({{{{{0.66112296, 0.67364277, 0.52908828},
                                  {0.56724338, 0.58715151, 0.11093917},
                                  {0.21574421, 0.15568454, 0.81052343}},
                                 {{0.57389508, 0.46795234, 0.62969397},
                                  {0.58735001, 0.96843709, 0.1604007},
                                  {0.88311546, 0.0441955, 0.48777658}},
                                 {{0.99507367, 0.56344149, 0.34286399},
                                  {0.15020997, 0.15300364, 0.84086095},
                                  {0.5106674, 0.45230156, 0.21724192}}},
                                {{{0.54456104, 0.18254561, 0.49353823},
                                  {0.59161612, 0.81852437, 0.46011312},
                                  {0.8643376, 0.71817923, 0.99371746}},
                                 {{0.48442184, 0.62605832, 0.73174494},
                                  {0.90427983, 0.21560154, 0.85167291},
                                  {0.60321318, 0.70176223, 0.72316361}},
                                 {{0.03911803, 0.284356, 0.47101786},
                                  {0.23046833, 0.43203527, 0.80362567},
                                  {0.10884239, 0.26013328, 0.64722489}}},
                                {{{0.97510859, 0.1980099, 0.82347827},
                                  {0.15653814, 0.05652895, 0.58470749},
                                  {0.08975475, 0.5209197, 0.59695489}},
                                 {{0.40475775, 0.58923968, 0.68776156},
                                  {0.84788879, 0.34349879, 0.65479406},
                                  {0.51828743, 0.85120858, 0.887165}},
                                 {{0.63091418, 0.04140195, 0.40599633},
                                  {0.66631594, 0.2543073, 0.63205863},
                                  {0.76469959, 0.27718685, 0.77058401}}}},
                               {{{{0.76044674, 0.37149033, 0.63693481},
                                  {0.16493972, 0.39922186, 0.52207407},
                                  {0.62832315, 0.31446105, 0.02643609}},
                                 {{0.9645732, 0.77071613, 0.94427702},
                                  {0.26666871, 0.68812401, 0.38689307},
                                  {0.53546113, 0.16914124, 0.89555937}},
                                 {{0.4721687, 0.27926555, 0.70239516},
                                  {0.96049311, 0.31865645, 0.32331102},
                                  {0.21770059, 0.62844267, 0.09343699}}},
                                {{{0.07849114, 0.65920192, 0.50361768},
                                  {0.8037707, 0.40200488, 0.93865193},
                                  {0.84854847, 0.13653603, 0.93155335}},
                                 {{0.1523697, 0.05254838, 0.23422355},
                                  {0.8149482, 0.71084632, 0.17120863},
                                  {0.72976323, 0.18223048, 0.63774388}},
                                 {{0.08280058, 0.96757341, 0.71725336},
                                  {0.54102355, 0.80810344, 0.34126637},
                                  {0.02703383, 0.09618924, 0.86222766}}},
                                {{{0.30848252, 0.54674818, 0.86541991},
                                  {0.32282904, 0.10568213, 0.80691165},
                                  {0.07859854, 0.81722915, 0.361137}},
                                 {{0.02174438, 0.40507394, 0.72047328},
                                  {0.66175617, 0.05338563, 0.89187698},
                                  {0.09398134, 0.44471422, 0.95331968}},
                                 {{0.96516804, 0.11543409, 0.62242626},
                                  {0.53548276, 0.18639343, 0.06890403},
                                  {0.23510953, 0.58660584, 0.95549776}}}}},
                              default_tensor_options));
      R4 U = R4(torch::tensor({{{{{0.23820857, 0.43305693, -0.20977483},
                                  {0.62563634, 0.54712896, 0.1482663},
                                  {-0.42577276, 0.0763476, 0.77115534}},
                                 {{-0.11860723, 0.05294212, -0.1852346},
                                  {0.1659533, 0.55463045, -0.02926287},
                                  {-0.4664211, 0.20061751, 0.08689772}},
                                 {{-0.57907037, -0.27356366, 0.86360503},
                                  {0.287918, -0.16939878, 0.27825703},
                                  {0.66426806, 0.12291877, -1.10089594}}},
                                {{{-0.05775137, -0.08507278, 0.2028092},
                                  {0.03165453, 0.15485068, -0.11123546},
                                  {-0.72807784, -0.06492156, 0.72400724}},
                                 {{0.22689592, -0.12497932, -0.26253125},
                                  {-0.0691542, -0.56413159, -0.00848574},
                                  {-0.09947468, 0.10061001, 0.12538374}},
                                 {{0.32656294, -0.09888548, 0.087943},
                                  {-0.20833318, 0.06218009, 0.27494329},
                                  {-0.2485973, 0.12094771, -0.62021714}}},
                                {{{-0.61516067, 0.29228151, 0.84331687},
                                  {-0.06538272, -0.08037612, -0.17996251},
                                  {0.41248725, 0.19490796, -1.66034649}},
                                 {{0.07809489, -0.24446264, 0.39108274},
                                  {-0.45171636, 0.27742552, 0.03804866},
                                  {0.50723862, 0.23988241, -0.89988478}},
                                 {{0.69355161, -0.20550391, -1.19532462},
                                  {0.15709077, -0.14514052, -0.46242684},
                                  {-1.20970014, 0.18995295, 3.24473836}}}},
                               {{{{1.80662401e-01, 2.30992895e-01, 4.16716700e-02},
                                  {5.46303120e-01, -5.01335032e-01, -4.20164842e-01},
                                  {3.45237585e-01, 2.83046910e-01, -1.08360710e-01}},
                                 {{-1.10956433e-01, 2.31933873e-01, -2.36368552e-01},
                                  {-8.82225585e-02, -1.77109937e-01, 4.71984190e-01},
                                  {-8.63517958e-01, 6.06794534e-02, -3.32412071e-01}},
                                 {{3.99221311e-01, -3.74380593e-01, 8.06549934e-01},
                                  {3.36087712e-01, 2.28762040e-01, 1.07806885e-03},
                                  {3.39218413e-01, -8.86278970e-01, 5.54460574e-01}}},
                                {{{-1.70045911e-01, 3.35782301e-01, -4.92487920e-01},
                                  {-1.36512395e-01, -3.11965941e-01, 2.07878381e-01},
                                  {-1.87618893e-01, 4.27001275e-01, -4.77098747e-01}},
                                 {{4.08517430e-01, -6.18683083e-01, 2.02015499e-01},
                                  {-2.17763336e-01, 9.03865297e-01, -2.72984143e-01},
                                  {4.82294248e-01, -1.77268585e-01, 7.24239195e-01}},
                                 {{6.15764792e-01, 5.52826398e-01, -1.03717942e-01},
                                  {3.16672613e-01, -9.65254322e-01, 7.06437977e-01},
                                  {-7.06110833e-01, 1.24276089e+00, -6.15586916e-01}}},
                                {{{-3.21101775e-01, -1.02332228e-01, 2.43456072e-01},
                                  {-2.69993608e-01, 1.36495866e-01, -3.00669270e-01},
                                  {3.00662831e-01, -7.85935411e-01, 5.23737846e-01}},
                                 {{3.61770267e-02, 8.35147050e-01, 4.37861968e-02},
                                  {1.36348191e-01, -5.17221618e-01, 4.72332509e-01},
                                  {-2.82354222e-01, 7.80659167e-01, -1.48510945e+00}},
                                 {{5.89718334e-01, -4.83828892e-01, 3.89318713e-01},
                                  {-1.10901117e+00, 8.02824058e-01, -1.09014644e+00},
                                  {6.04581848e-01, -1.24212076e+00, 1.79399285e+00}}}}},
                              default_tensor_options));

      REQUIRE(torch::allclose(a.apply(T), U));
    }
  }

  SECTION("rotate SymSymR4s")
  {
    SECTION("unbatched")
    {
      Rot a = Rot::init(1.2496889, 1.62862628, 7.59575411);
      SymSymR4 T = SymSymR4(torch::tensor(
          {{{0.66086749, 0.26509302, 0.55764353, 0.27368709, 0.16527339, 0.18229984},
            {0.2164092, 0.7357522, 0.29142165, 0.64753131, 0.96644071, 0.7476113},
            {0.49247497, 0.8989371, 0.56977659, 0.45106647, 0.07075565, 0.20201865},
            {0.83117451, 0.4132504, 0.92118474, 0.81776138, 0.16917866, 0.85560904},
            {0.63618107, 0.80588965, 0.53258787, 0.45440311, 0.7853135, 0.1011699},
            {0.78730947, 0.38979234, 0.61653301, 0.98293833, 0.90139196, 0.08489829}}},
          default_tensor_options));
      SymSymR4 U = SymSymR4(torch::tensor({{{4.15364825e-01,
                                             -2.83211571e-02,
                                             4.62312959e-01,
                                             2.38964778e-02,
                                             -4.02181770e-02,
                                             -1.22499802e-01},
                                            {-4.05881972e-01,
                                             3.61349504e-01,
                                             5.90686850e-02,
                                             -1.95566720e-01,
                                             -4.96611003e-01,
                                             2.86345828e-01},
                                            {9.69341009e-01,
                                             6.01339282e-01,
                                             2.25380261e+00,
                                             -6.09222202e-01,
                                             -8.49813214e-01,
                                             4.47490904e-02},
                                            {-1.50202034e-01,
                                             4.50361133e-01,
                                             -7.49992554e-01,
                                             1.22987450e-01,
                                             5.56251500e-01,
                                             -2.83398279e-01},
                                            {-2.64069598e-01,
                                             -3.44878006e-01,
                                             -1.34724573e+00,
                                             -2.13162040e-03,
                                             8.93062880e-01,
                                             4.85206282e-01},
                                            {-3.39076103e-01,
                                             8.79393192e-02,
                                             4.02061883e-01,
                                             -1.67154634e-01,
                                             -4.12658966e-01,
                                             -3.92197835e-01}}},
                                          default_tensor_options));

      REQUIRE(torch::allclose(a.apply(T), U));
    }

    SECTION("batched")
    {
      Rot a = Rot(torch::tensor({{1.2496889, 1.62862628, 7.59575411}, {1.2, -0.2, 0.6}},
                                default_tensor_options));
      SymSymR4 T = SymSymR4(torch::tensor(
          {{{0.66086749, 0.26509302, 0.55764353, 0.27368709, 0.16527339, 0.18229984},
            {0.2164092, 0.7357522, 0.29142165, 0.64753131, 0.96644071, 0.7476113},
            {0.49247497, 0.8989371, 0.56977659, 0.45106647, 0.07075565, 0.20201865},
            {0.83117451, 0.4132504, 0.92118474, 0.81776138, 0.16917866, 0.85560904},
            {0.63618107, 0.80588965, 0.53258787, 0.45440311, 0.7853135, 0.1011699},
            {0.78730947, 0.38979234, 0.61653301, 0.98293833, 0.90139196, 0.08489829}},
           {{0.58211988, 0.56829733, 0.43238483, 0.46453731, 0.55171921, 0.17102725},
            {0.82011537, 0.41480093, 0.21082344, 0.95489709, 0.913773, 0.00713299},
            {0.31059774, 0.6545394, 0.3989269, 0.20001392, 0.16379315, 0.81503173},
            {0.75936217, 0.35572537, 0.93633873, 0.44523008, 0.4224959, 0.04536747},
            {0.10988032, 0.61270372, 0.18945179, 0.57744553, 0.13433775, 0.12427013},
            {0.40457772, 0.51711479, 0.01738209, 0.05842261, 0.53167335, 0.48339826}}},
          default_tensor_options));
      SymSymR4 U = SymSymR4(
          torch::tensor({{{4.15364825e-01,
                           -2.83211571e-02,
                           4.62312959e-01,
                           2.38964778e-02,
                           -4.02181770e-02,
                           -1.22499802e-01},
                          {-4.05881972e-01,
                           3.61349504e-01,
                           5.90686850e-02,
                           -1.95566720e-01,
                           -4.96611003e-01,
                           2.86345828e-01},
                          {9.69341009e-01,
                           6.01339282e-01,
                           2.25380261e+00,
                           -6.09222202e-01,
                           -8.49813214e-01,
                           4.47490904e-02},
                          {-1.50202034e-01,
                           4.50361133e-01,
                           -7.49992554e-01,
                           1.22987450e-01,
                           5.56251500e-01,
                           -2.83398279e-01},
                          {-2.64069598e-01,
                           -3.44878006e-01,
                           -1.34724573e+00,
                           -2.13162040e-03,
                           8.93062880e-01,
                           4.85206282e-01},
                          {-3.39076103e-01,
                           8.79393192e-02,
                           4.02061883e-01,
                           -1.67154634e-01,
                           -4.12658966e-01,
                           -3.92197835e-01}},
                         {{0.155977, 0.2995, 0.196538, -0.63283, 0.145346, 0.245505},
                          {0.203063, 0.555953, 0.95258, -0.307636, 0.267479, -0.344414},
                          {0.750679, 0.20385, 1.07447, -1.18119, 0.640274, -0.139742},
                          {-0.56129, -0.815549, -0.563825, 0.837679, -0.420192, -0.0415344},
                          {0.192891, 0.403458, 0.460108, -0.0325185, -0.134331, -0.190007},
                          {0.435477, 0.244432, -0.523925, 0.0254154, 0.46663, -0.0309299}}},
                        default_tensor_options));

      REQUIRE(torch::allclose(a.apply(T), U));
    }
  }
}

TEST_CASE("Rot derivatives", "[Rot]")
{
  Rot a = Rot::init(Scalar(torch::tensor({{1.2496889}, {-2.74440729}}, default_tensor_options)),
                    Scalar(torch::tensor({{1.62862628}, {-1.10086082}}, default_tensor_options)),
                    Scalar(torch::tensor({{7.59575411}, {-14.83201462}}, default_tensor_options)));
  SECTION("Matrix")
  {
    // We only use this one to define other derivative operators
    auto deriv = a.dR2();

    R3 nderiv(torch::zeros({2, 3, 3, 3}, default_tensor_options));
    finite_differencing_derivative([](const Rot & x) { return x.to_R2(); }, a, nderiv);

    REQUIRE(torch::allclose(deriv, nderiv));
  }

  SECTION("Rot")
  {
    Rot b =
        Rot::init(Scalar(torch::tensor({{-5.68010824}, {0.97525904}}, default_tensor_options)),
                  Scalar(torch::tensor({{-2.8011194}, {0.05227498}}, default_tensor_options)),
                  Scalar(torch::tensor({{15.25705169}, {-2.83462851}}, default_tensor_options)));

    auto deriv = a.dapply(b);

    RotRot nderiv(torch::zeros({2, 3, 3}, default_tensor_options));
    finite_differencing_derivative([b](const Rot & x) { return x.apply(b); }, a, nderiv);

    REQUIRE(torch::allclose(deriv, nderiv));
  }

  SECTION("Vec")
  {
    Vec b = Vec(torch::tensor({{1.0, -2.0, 3.0}, {0.1, -0.75, 1.0}}, default_tensor_options));

    auto deriv = a.dapply(b);

    RotRot nderiv(torch::zeros({2, 3, 3}, default_tensor_options));
    finite_differencing_derivative([b](const Rot & x) { return x.apply(b); }, a, nderiv);

    REQUIRE(torch::allclose(deriv, nderiv));
  }

  SECTION("R2")
  {
    R2 T = R2(torch::tensor({{{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}},
                             {{0.615498, 0.423851, 0.923136},
                              {0.919749, 0.032701, 0.596574},
                              {0.318928, 0.14111, 0.132195}}},
                            default_tensor_options));

    auto deriv = a.dapply(T);

    R2Rot nderiv(torch::zeros({2, 3, 3, 3}, default_tensor_options));

    finite_differencing_derivative([T](const Rot & x) { return x.apply(T); }, a, nderiv);

    REQUIRE(torch::allclose(deriv, nderiv));
  }

  SECTION("SymR2")
  {
    SymR2 T = SymR2(
        torch::tensor({{1.0, 5.0, 9.0, 9.89949494, 7.07106781, 4.24264069},
                       {0.75358893, 0.02714332, 0.32255212, 0.0489869, 0.57781672, 1.19529574}},
                      default_tensor_options));

    auto deriv = a.dapply(T);

    SymR2Rot nderiv(torch::zeros({2, 6, 3}, default_tensor_options));

    finite_differencing_derivative([T](const Rot & x) { return x.apply(T); }, a, nderiv);

    REQUIRE(torch::allclose(deriv, nderiv));
  }

  SECTION("R4")
  {
    R4 T = R4(torch::tensor({{{{{0.66112296, 0.67364277, 0.52908828},
                                {0.56724338, 0.58715151, 0.11093917},
                                {0.21574421, 0.15568454, 0.81052343}},
                               {{0.57389508, 0.46795234, 0.62969397},
                                {0.58735001, 0.96843709, 0.1604007},
                                {0.88311546, 0.0441955, 0.48777658}},
                               {{0.99507367, 0.56344149, 0.34286399},
                                {0.15020997, 0.15300364, 0.84086095},
                                {0.5106674, 0.45230156, 0.21724192}}},
                              {{{0.54456104, 0.18254561, 0.49353823},
                                {0.59161612, 0.81852437, 0.46011312},
                                {0.8643376, 0.71817923, 0.99371746}},
                               {{0.48442184, 0.62605832, 0.73174494},
                                {0.90427983, 0.21560154, 0.85167291},
                                {0.60321318, 0.70176223, 0.72316361}},
                               {{0.03911803, 0.284356, 0.47101786},
                                {0.23046833, 0.43203527, 0.80362567},
                                {0.10884239, 0.26013328, 0.64722489}}},
                              {{{0.97510859, 0.1980099, 0.82347827},
                                {0.15653814, 0.05652895, 0.58470749},
                                {0.08975475, 0.5209197, 0.59695489}},
                               {{0.40475775, 0.58923968, 0.68776156},
                                {0.84788879, 0.34349879, 0.65479406},
                                {0.51828743, 0.85120858, 0.887165}},
                               {{0.63091418, 0.04140195, 0.40599633},
                                {0.66631594, 0.2543073, 0.63205863},
                                {0.76469959, 0.27718685, 0.77058401}}}},
                             {{{{0.76044674, 0.37149033, 0.63693481},
                                {0.16493972, 0.39922186, 0.52207407},
                                {0.62832315, 0.31446105, 0.02643609}},
                               {{0.9645732, 0.77071613, 0.94427702},
                                {0.26666871, 0.68812401, 0.38689307},
                                {0.53546113, 0.16914124, 0.89555937}},
                               {{0.4721687, 0.27926555, 0.70239516},
                                {0.96049311, 0.31865645, 0.32331102},
                                {0.21770059, 0.62844267, 0.09343699}}},
                              {{{0.07849114, 0.65920192, 0.50361768},
                                {0.8037707, 0.40200488, 0.93865193},
                                {0.84854847, 0.13653603, 0.93155335}},
                               {{0.1523697, 0.05254838, 0.23422355},
                                {0.8149482, 0.71084632, 0.17120863},
                                {0.72976323, 0.18223048, 0.63774388}},
                               {{0.08280058, 0.96757341, 0.71725336},
                                {0.54102355, 0.80810344, 0.34126637},
                                {0.02703383, 0.09618924, 0.86222766}}},
                              {{{0.30848252, 0.54674818, 0.86541991},
                                {0.32282904, 0.10568213, 0.80691165},
                                {0.07859854, 0.81722915, 0.361137}},
                               {{0.02174438, 0.40507394, 0.72047328},
                                {0.66175617, 0.05338563, 0.89187698},
                                {0.09398134, 0.44471422, 0.95331968}},
                               {{0.96516804, 0.11543409, 0.62242626},
                                {0.53548276, 0.18639343, 0.06890403},
                                {0.23510953, 0.58660584, 0.95549776}}}}},
                            default_tensor_options));

    auto deriv = a.dapply(T);

    R4Rot nderiv(torch::zeros({2, 3, 3, 3, 3, 3}, default_tensor_options));
    finite_differencing_derivative([T](const Rot & x) { return x.apply(T); }, a, nderiv);

    REQUIRE(torch::allclose(deriv, nderiv, 1.0e-5, 1.0e-6));
  }

  SECTION("SymSymR4")
  {
    SymSymR4 T = SymSymR4(
        torch::tensor({{{0.66086749, 0.26509302, 0.55764353, 0.27368709, 0.16527339, 0.18229984},
                        {0.2164092, 0.7357522, 0.29142165, 0.64753131, 0.96644071, 0.7476113},
                        {0.49247497, 0.8989371, 0.56977659, 0.45106647, 0.07075565, 0.20201865},
                        {0.83117451, 0.4132504, 0.92118474, 0.81776138, 0.16917866, 0.85560904},
                        {0.63618107, 0.80588965, 0.53258787, 0.45440311, 0.7853135, 0.1011699},
                        {0.78730947, 0.38979234, 0.61653301, 0.98293833, 0.90139196, 0.08489829}},
                       {{0.58211988, 0.56829733, 0.43238483, 0.46453731, 0.55171921, 0.17102725},
                        {0.82011537, 0.41480093, 0.21082344, 0.95489709, 0.913773, 0.00713299},
                        {0.31059774, 0.6545394, 0.3989269, 0.20001392, 0.16379315, 0.81503173},
                        {0.75936217, 0.35572537, 0.93633873, 0.44523008, 0.4224959, 0.04536747},
                        {0.10988032, 0.61270372, 0.18945179, 0.57744553, 0.13433775, 0.12427013},
                        {0.40457772, 0.51711479, 0.01738209, 0.05842261, 0.53167335, 0.48339826}}},
                      default_tensor_options));

    auto deriv = a.dapply(T);

    SymSymR4Rot nderiv(torch::zeros({2, 6, 6, 3}, default_tensor_options));
    finite_differencing_derivative([T](const Rot & x) { return x.apply(T); }, a, nderiv);

    REQUIRE(torch::allclose(deriv, nderiv, 1.0e-5, 1.0e-6));
  }
}
