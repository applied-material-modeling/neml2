name: tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'

permissions:
  contents: read  # Required when overriding permissions
  pull-requests: write  # For posting coverage report

# Newer commits should cancel old runs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  clang-format:
    name: Formatting Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - "src"
          - "include"
          - "tests"
    steps:
      - uses: actions/checkout@v3
      - name: Run clang-format style check
        uses: jidicula/clang-format-action@v4.10.1
        with:
          clang-format-version: "14"
          check-path: ${{ matrix.path }}
  copyright:
    name: Copyright check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Check to see if source files have the correct copyright header
        run: python scripts/check_copyright.py
  build-test:
    needs: clang-format
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        btype: [Release, Debug]
        unity: [ON, OFF]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: |
          cmake \
            -DCMAKE_BUILD_TYPE=${{ matrix.btype }} \
            -DCMAKE_UNITY_BUILD=${{ matrix.unity }} \
            -DNEML2_UNIT=ON \
            -DNEML2_REGRESSION=ON \
            -DNEML2_VERIFICATION=ON \
            -DNEML2_BENCHMARK=OFF \
            -DNEML2_PROFILING=OFF \
            -DNEML2_DOC=OFF \
            .
      - run: make -j 2
      - run: make test
  build-all:
    needs: clang-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        btype: [Release, Debug]
        unity: [ON, OFF]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: |
          cmake \
            -DCMAKE_BUILD_TYPE=${{ matrix.btype }} \
            -DCMAKE_UNITY_BUILD=${{ matrix.unity }} \
            -DNEML2_UNIT=ON \
            -DNEML2_REGRESSION=ON \
            -DNEML2_VERIFICATION=ON \
            -DNEML2_BENCHMARK=ON \
            -DNEML2_PROFILING=ON \
            -DNEML2_DOC=OFF \
            .
      - run: make -j 2
  coverage:
    name: Code coverage check
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: sudo apt install lcov
      - run: |
          cmake \
            -DCMAKE_BUILD_TYPE=Coverage \
            -DCMAKE_UNITY_BUILD=OFF \
            -DNEML2_UNIT=ON \
            -DNEML2_REGRESSION=ON \
            -DNEML2_VERIFICATION=ON \
            -DNEML2_BENCHMARK=OFF \
            -DNEML2_PROFILING=OFF \
            -DNEML2_DOC=OFF \
            .
      - run: make -j 2
      - run: ./scripts/coverage.sh
      - uses: romeovs/lcov-reporter-action@v0.2.19
        with:
          lcov-file: ./coverage/coverage.info
          github-token: ${{ secrets.PR_ACTION }}
  cmake-integration:
    name: Test CMake integration as a subproject
    needs: clang-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          path: neml2
      - name: Create a source file for testing purposes
        run: |
          echo -e "\
            #include \"neml2/base/Registry.h\"\n\
            int main() {\n\
              std::cout << neml2::Registry::expected_options(\"ScalarSumModel\") << std::endl;\n\
              return 0;\n\
            }\
            " > main.cxx
      - run: cat main.cxx
      - name: Create a CMakeLists.txt file for testing purposes
        run: |
          echo -e "\
            cmake_minimum_required(VERSION 3.5)
            project(FOO)\n\
            add_subdirectory(neml2)\n\
            add_executable(foo main.cxx)\n\
            target_link_libraries(foo neml2)\n\
            " > CMakeLists.txt
      - run: cat CMakeLists.txt
      - name: Configure with CMake
        run: cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DNEML2_DOC=OFF -B build .
      - name: Compile
        run: cd build && make -j 2
      - run: cd build && ./foo

